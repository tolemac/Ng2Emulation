// Generated by dts-bundle v0.3.0

declare module 'Ng2Emulation' {
    export * from "Ng2Emulation/Decorators/Component";
    export * from "Ng2Emulation/Decorators/Directive";
    export * from "Ng2Emulation/Decorators/Inject";
    export * from "Ng2Emulation/Decorators/Injectable";
    export * from "Ng2Emulation/Events/EventEmitter";
    export * from "Ng2Emulation/Core/Bootstrap";
    export * from "Ng2Emulation/Decorators/Output";
    export * from "Ng2Emulation/Decorators/Input";
    export { OnChanges, OnInit, OnDestroy } from "Ng2Emulation/Core/LifeCycle/LifeCycleHooks";
}

declare module 'Ng2Emulation/Decorators/Component' {
    export interface IComponentMetadata {
        template?: string;
        templateUrl?: string;
        selector?: string;
        directives?: Function[];
        outputs?: string[];
        inputs?: string[];
        styles?: string[];
        providers?: (Function | string)[];
    }
    export function Component(componentMetadata: IComponentMetadata): (target: any) => any;
}

declare module 'Ng2Emulation/Decorators/Directive' {
    export interface IDirectiveMetadata {
        selector?: string;
        priority?: number;
        outputs?: string[];
        inputs?: string[];
    }
    export function Directive(directiveMetadata: IDirectiveMetadata): (target: any) => any;
}

declare module 'Ng2Emulation/Decorators/Inject' {
    export function Inject(token: Function | string): (target: any, key: string, index: number) => void;
}

declare module 'Ng2Emulation/Decorators/Injectable' {
    export function Injectable(): (target: any) => any;
}

declare module 'Ng2Emulation/Events/EventEmitter' {
    export class EventEmiter<T> {
        subscribe(handler: (event: T) => boolean): void;
        emit(event: T): void;
    }
}

declare module 'Ng2Emulation/Core/Bootstrap' {
    export class BootStrapper {
        static AddService(service: Function): void;
        static BootStrap(component: Function, angular1DependendModules?: string[]): void;
    }
    export function bootstrap(component: Function, angular1DependendModules?: string[]): void;
}

declare module 'Ng2Emulation/Decorators/Output' {
    export function Output(outputName?: string): (target: any, key: string) => void;
}

declare module 'Ng2Emulation/Decorators/Input' {
    export function Input(inputName?: string): (target: any, key: string) => void;
}

declare module 'Ng2Emulation/Core/LifeCycle/LifeCycleHooks' {
    import { SimpleChange } from "Ng2Emulation/Core/ChangeDetection";
    export interface OnChanges {
        ngOnChanges(changes: {
            [propertyName: string]: SimpleChange;
        }): any;
    }
    export interface OnInit {
        ngOnInit(): any;
    }
    export interface OnDestroy {
        ngOnDestroy(): any;
    }
    export function initLifeCycleHooks(app: ng.IModule): void;
}

declare module 'Ng2Emulation/Core/ChangeDetection' {
    export class SimpleChange {
        previousValue: any;
        currentValue: any;
        constructor(previousValue: any, currentValue: any);
        isFirstChange(): boolean;
    }
    export let componentChanges: {
        component: any;
        changes: {
            [propertyName: string]: SimpleChange;
        };
    }[];
    export function getComponentChanges(component: any): {
        component: any;
        changes: {
            [propertyName: string]: SimpleChange;
        };
    };
    export function registerChange(component: any, propertyName: string, simpleChange: SimpleChange): void;
    export function removeChanges(): void;
    export let componentInstances: any[];
    export function registerComponentInstance(component: any): void;
}

